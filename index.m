function varargout = index(varargin)
% INDEX MATLAB code for index.fig
%      INDEX, by itself, creates a new INDEX or raises the existing
%      singleton*.
%
%      H = INDEX returns the handle to a new INDEX or the handle to
%      the existing singleton*.
%
%      INDEX('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in INDEX.M with the given input arguments.
%
%      INDEX('Property','Value',...) creates a new INDEX or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before index_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to index_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help index

% Last Modified by GUIDE v2.5 23-Oct-2018 20:57:17

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @index_OpeningFcn, ...
                   'gui_OutputFcn',  @index_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before index is made visible.
function index_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to index (see VARARGIN)

set(handles.text14,'String','Status : none Image Selected')% Auto-generated by cameraCalibrator app on 24-Oct-2018
axes(handles.axes27);
matlabImage = imread('logounud.png');
image(matlabImage)
axis off
axis image
set(handles.uipanel1,'visible','on');
set(handles.uipanel13,'visible','off');
set(handles.uipanel14,'visible','off');

% Choose default command line output for index
handles.output = hObject;
handles.output = lf;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes index wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = index_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;



% --- Executes on button press in pushbutton2.

% --- Executes on button press in pushbutton4.


% --- Executes on button press in pushbutton5.
function pushbutton111_Callback(hObject, eventdata, handles)

[ video_file_name,video_file_path ] = uigetfile({'video/*.mp4'},'Pick a video file');      %;*.png;*.yuv;*.bmp;*.tif'},'Pick a file');
if(video_file_path == 0)
    return;
end

input_video_file = [video_file_path,video_file_name];
% Acquiring video
videoObject = VideoReader(input_video_file);
% Display first frame
frame_1 = read(videoObject,1);
axes(handles.axes13);
imshow(frame_1);
drawnow;

rgbSum = double(frame_1);
set(handles.text14,'String','Status : Process TimeX Image');

for frameCount = 3:50
    % Display frames
    disp(frameCount)
    frame = read(videoObject,frameCount);
    imshow(frame);
  thisFrame = double(read(videoObject, frameCount)); 
  rgbSum = rgbSum  + thisFrame; 
    drawnow;
end
rgbMean = rgbSum / 50;
dst_img=uint8(rgbMean);
imwrite(dst_img,'CitraTimex.jpg','jpg','Comment','My JPEG file')

set(handles.text14,'String','Status : Process Kalibrasi Image');
% Define images to process
% Define images to process

% Define images to process
% Define images to process
imageFileNames = {'/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/53.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/43.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/44.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/45.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/30.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/31.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/37.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/27.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/28.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/26.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/21.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/22.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/2.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/3.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/1.jpg',...
    };

% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates of the corners of the squares
squareSize = 25;  % in units of 'millimeters'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', true, 'EstimateTangentialDistortion', true, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

% View reprojection errors
h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
%h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
%displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
undistortedImage = undistortImage(originalImage, cameraParams);
JJ = undistortImage(dst_img,cameraParams);
imwrite(JJ,'newImage.jpg','jpg','Comment','My JPEG file')
handles.videoObject = JJ;
guidata(hObject,handles);
figure,imshow(JJ),title('Image Correction');
set(handles.text14,'String','Status : Done, Start Shoreline Detect');



% --- Executes on button press in pushbutton6.
function pushbutton11_Callback(hObject, eventdata, handles)

% Have user browse for a file, from a specified "starting folder."
% For convenience in browsing, set a starting folder from which to browse.
startingFolder = pwd;
mydir  = pwd;

if ~exist(startingFolder, 'dir')
    
 startingFolder   = strfind(mydir,'/timex');
	
end
% Get the name of the file that the user wants to use.
defaultFileName = fullfile('timex/', '*.*');
[baseFileName, folder] = uigetfile(defaultFileName, 'Select a file');
%-------------------------------------------------------
set(handles.text14,'String','Status : Process Kalibrasi Image');

if baseFileName == 0
	% User clicked the Cancel button.
	return;
end
fullFileName = fullfile(folder, baseFileName);
img = imread(fullFileName);
axes(handles.axes13);
imshow(img);
% Define images to process
% Define images to process

% Define images to process
% Define images to process
imageFileNames = {'/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/53.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/43.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/44.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/45.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/30.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/31.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/37.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/27.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/28.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/26.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/21.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/22.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/2.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/3.jpg',...
    '/Users/itsupport/OneDrive/Documents/Kampus/covimos2.0/calibration_pattern/1.jpg',...
    };

% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates of the corners of the squares
squareSize = 25;  % in units of 'millimeters'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', true, 'EstimateTangentialDistortion', true, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);


% View reprojection errors
h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
undistortedImage = undistortImage(originalImage, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
JJ = undistortImage(img,cameraParams);
imwrite(JJ,'newImage.jpg','jpg','Comment','My JPEG file')
handles.videoObject = JJ;
guidata(hObject,handles);
figure,imshow(JJ),title('Image Correction');
set(handles.text14,'String','Status : Done, Start Shoreline Detect');


%imshow(img);


% --- Executes on button press in pushbutton7.
function pushbutton18_Callback(hObject, eventdata, handles)

set(handles.uipanel1,'visible','off');
set(handles.uipanel13,'visible','on');

set(handles.uipanel14,'visible','off');

% Acquiring video
videoObject2 = VideoReader('20181016_x264.mp4');
% Display first frame
frame_2 = read(videoObject2,1);
axes(handles.axes28);
imshow(frame_2);

imwrite(frame_2,'CitraSnapshot.jpg','jpg','Comment','My JPEG file')

drawnow;
for frameCount = 2:videoObject2.NumberOfFrames
    % Display frames
    frame2 = read(videoObject2,frameCount);
    imshow(frame2);
    drawnow;
end

warning('off', 'Images:initSize:adjustingMag');
% hObject    handle to pushbutton7 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton8.
function pushbutton19_Callback(hObject, eventdata, handles)
set(handles.uipanel1,'visible','on');

set(handles.uipanel14,'visible','off')
set(handles.uipanel13,'visible','off');
% hObject    handle to pushbutton8 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


function pushbutton9_Callback(hObject, eventdata, handles)
 
    lvlthres=str2double(get(handles.edit4, 'String'));
    BwInver=str2double(get(handles.edit5, 'String'));
    BwOpen=str2double(get(handles.edit6, 'String'));
   
    %imgaddr=getimage(handles.axes13);
    imgaddr=strcat('newImage.jpg');   
    
    %imgaddr = handles.videoObject;
    %imgaddr=rgb2gray(imgaddr);
    cimg=imread(imgaddr);
    axes(handles.axes1);
    imshow(imgaddr);
    
    set(handles.text14,'String','Status : Image Rectification');
    pause(1);
    % axes(handles.axes1);
    % set(handles.axes1,'xtick',[],'ytick',[]);
    
    axes(handles.axes3);
    g_rect(imgaddr,lvlthres,BwInver,BwOpen);
    
    set(handles.text14,'String','Status : Shoreline Extraction.. Please wait');
    
    F=getframe(handles.axes3);
    Image=frame2im(F);
    imwrite(Image,'asdasds.png')
   
    pause(1);
    
    axes(handles.axes6);
   % set(handles.axes3,'xtick',[],'ytick',[]);
   
        [rgb,lf,vpsnr,vstds,vmse]=Mth_HS1;
        handles.lf = lf;
        
        axes(handles.axes7);
        imshow(rgb);
        
        
    imgaddrSeg=strcat('CitraSegmentasi.jpg');   
        axes(handles.axes6);
        imshow(imgaddrSeg);
        
    %imgaddrHis=strcat('HistogramSegmentasi.jpg');   
        %axes(handles.axes30);
      %  imshow(imhist(rgb));
      
      
axes(handles.axes30);
Iss=rgb2gray(rgb);
imhist(Iss)
     %    [counts,binLocations] = imhist(imgaddrSeg);
 %stem(handles.axes30,binLocations,counts);
        

        set(handles.text43,'String',+vpsnr);
        set(handles.text44,'String',+vstds);
        set(handles.text45,'String',+vmse);
    
        figure,imshow(rgb),title('shoreline Detect');
        hImg=imshow(rgb);   
        metersPerPixel = 5/43; 
       
        XDataInCMeters = get(hImg,'XData')*metersPerPixel;  
        YDataInCMeters = get(hImg,'YData')*metersPerPixel; 
        % Set XData and YData of image to reflect desired units.    
        set(hImg,'XData',XDataInCMeters,'YData',YDataInCMeters); 
        
       
        set(gca,'XLim',XDataInCMeters,'YLim',YDataInCMeters); 
        hline = imdistline(gca,[10 10],[10 40]);
        api = iptgetapi(hline); 
        api.setLabelTextFormatter('%02.2f m'); 
       guidata(hObject, handles);
      pause(1);
      
    set(handles.text14,'String','Status : Done!');
    


% --------------------------------------------------------------------
function Untitled_1_Callback(hObject, eventdata, handles)
% hObject    handle to Untitled_1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function Untitled_2_Callback(hObject, eventdata, handles)
% hObject    handle to Untitled_2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton20.
function pushbutton20_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton20 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

lf = handles.lf;
figure,imshow(lf);
save('frame_referensi.mat','lf');


% --- Executes on button press in pushbutton21.
function pushbutton21_Callback(hObject, eventdata, handles)

set(handles.uipanel1,'visible','off');
set(handles.uipanel14,'visible','on')
set(handles.uipanel13,'visible','off');

% hObject    handle to pushbutton21 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)



function edit1_Callback(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit1 as text
%        str2double(get(hObject,'String')) returns contents of edit1 as a double


% --- Executes during object creation, after setting all properties.
function edit1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit3_Callback(hObject, eventdata, handles)
% hObject    handle to edit3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit3 as text
%        str2double(get(hObject,'String')) returns contents of edit3 as a double


% --- Executes during object creation, after setting all properties.
function edit3_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton22.
function pushbutton22_Callback(hObject, eventdata, handles)

    set(handles.text33,'String','Status : Select Video');
    
frameAwal=str2double(get(handles.edit1, 'String'));
frameAkhir=str2double(get(handles.edit3, 'String'));

[ video_file_name,video_file_path ] = uigetfile({'video/*.mp4'},'Pick a video file');      %;*.png;*.yuv;*.bmp;*.tif'},'Pick a file');
if(video_file_path == 0)
    return;
end

input_video_file = [video_file_path,video_file_name];
% Acquiring video
videoObject = VideoReader(input_video_file);

    disp(videoObject.NumberOfFrames);
% Display first frame
frame_1 = read(videoObject,1);
axes(handles.axes29);
imshow(frame_1);
drawnow;

rgbSum = double(frame_1);

Output_folderasds='timex/';
for frameCount = frameAwal:frameAkhir
    % Display frames
    disp(frameCount)
    
    set(handles.text33,'String','Status : Wait!Process TimeX '+frameCount);
    frame = read(videoObject,frameCount);
    imshow(frame);
  thisFrame = double(read(videoObject, frameCount)); 
  rgbSum = rgbSum  + thisFrame; 
  
Outputsqwwe='imagess'+frameCount;
%imwrite(frame, [Output_folderasds Outputsqwwe '.jpg'],'jpg','Comment','My JPEG file')
    drawnow;
end

rgbMean = rgbSum / frameAkhir;
dst_img=uint8(rgbMean);
Output_folder='timex/';
Outputs=video_file_name;
    set(handles.text33,'String','Status : Done!');
imwrite(dst_img, [Output_folder Outputs '.jpg'],'jpg','Comment','My JPEG file')

% hObject    handle to pushbutton22 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)



function edit4_Callback(hObject, eventdata, handles)
% hObject    handle to edit4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit4 as text
%        str2double(get(hObject,'String')) returns contents of edit4 as a double


% --- Executes during object creation, after setting all properties.
function edit4_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit5_Callback(hObject, eventdata, handles)
% hObject    handle to edit5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit5 as text
%        str2double(get(hObject,'String')) returns contents of edit5 as a double


% --- Executes during object creation, after setting all properties.
function edit5_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit6_Callback(hObject, eventdata, handles)
% hObject    handle to edit6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit6 as text
%        str2double(get(hObject,'String')) returns contents of edit6 as a double


% --- Executes during object creation, after setting all properties.
function edit6_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
